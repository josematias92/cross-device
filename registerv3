<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Passkey Registration and Authentication</title>
</head>
<body>
    <h1>Passkey Portal</h1>
    <h2>Register Passkey</h2>
    <form id="register-form">
        <label for="register-email">Email:</label>
        <input type="email" id="register-email" required>
        <button type="submit">Register</button>
    </form>

    <h2>Authenticate with Passkey</h2>
    <form id="authenticate-form">
        <label for="auth-email">Email:</label>
        <input type="email" id="auth-email" required>
        <button type="submit">Authenticate</button>
    </form>

    <script>
        document.getElementById('register-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            const email = document.getElementById('register-email').value;

            // Start Registration
            const options = await fetch('/auth/start-registration', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email })
            }).then(response => response.json());

            // Create credentials
            const credential = await navigator.credentials.create({ publicKey: options });

            // Verify Registration
            await fetch('/auth/verify-registration', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email,
                    id: credential.id,
                    rawId: new Uint8Array(credential.rawId),
                    response: {
                        attestationObject: new Uint8Array(credential.response.attestationObject),
                        clientDataJSON: new Uint8Array(credential.response.clientDataJSON)
                    },
                    type: credential.type
                })
            }).then(response => response.json()).then(data => {
                if (data.success) {
                    alert('Registration successful');
                } else {
                    alert('Registration failed: ' + data.error);
                }
            });
        });

        document.getElementById('authenticate-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            const email = document.getElementById('auth-email').value;

            // Start Authentication
            const options = await fetch('/auth/start-authentication', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email })
            }).then(response => response.json());

            // Get credentials
            const credential = await navigator.credentials.get({ publicKey: options });

            // Verify Authentication
            await fetch('/auth/verify-authentication', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email,
                    id: credential.id,
                    rawId: new Uint8Array(credential.rawId),
                    response: {
                        authenticatorData: new Uint8Array(credential.response.authenticatorData),
                        clientDataJSON: new Uint8Array(credential.response.clientDataJSON),
                        signature: new Uint8Array(credential.response.signature),
                        userHandle: new Uint8Array(credential.response.userHandle)
                    },
                    type: credential.type
                })
            }).then(response => response.json()).then(data => {
                if (data.success) {
                    alert('Authentication successful');
                } else {
                    alert('Authentication failed: ' + data.error);
                }
            });
        });
    </script>
</body>
</html>
